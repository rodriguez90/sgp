<?php
/**
 * Created by PhpStorm.
 * User: pedro
 * Date: 03/05/2019
 * Time: 14:04
 */

namespace app\forms;
use app\models\Pedido;
use app\models\Medicamento;
use app\models\PedidoDetalle;
use Yii;
use yii\base\Model;

/**
 * Class PedidoForm
 * @package app\forms
 * @property Pedido $pedido
 * @property PedidoDetalle[] $pedidoDetalles
 */


class PedidoForm extends Model
{
    private $_id = null;
    private  $_pedido = null;
    private $_pedidoDetalles = [];

    public function __construct(array $config = [])
    {
        $this->_id = $config['id'];
        unset($config['id']);
        parent::__construct($config);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if ($this->_id == null)
        {
            $this->_pedido = new Pedido();
            $this->_pedido->usuario_id = Yii::$app->user->id;
            $this->_pedido->estado = Pedido::SOLICITADO;
            $this->_pedido->observacion = '';
        }
        else if($this->_id) {
            $this->_pedido = Pedido::findOne(['id'=> $this->_id]);
        }
    }

    public function rules()
    {
        $rules = [
            [['estado', 'usuario_id'], 'required'],
            [['estado', 'usuario_id'], 'integer'],
            [['observacion'], 'string'],
        ];

        return $rules;
    }

    private $_usuario_id = null;

    public function getUsuario_id() {
        return $this->pedido->usuario_id;
    }

    public function setUsuario_id($usuario_id) {
        $this->pedido->usuario_id = usuario_id;
    }

    private $_observacion = null;

    public function getObservacion() {
        return $this->_pedido->observacion;
    }

    public function setObservacion($observacion) {
        $this->_pedido->observacion = $observacion;
    }

    public function getEstado() {
        return $this->_pedido->estado;
    }

    private $_usuario;
    public function getUsuario() {
        return $this->pedido->usuario;
    }

    private $_fecha_registro;
    public function getFecha_registro() {
        return $this->pedido->fecha_registro;
    }

    private $_fecha_entrega;
    public function getFecha_entrega() {
        return $this->pedido->fecha_entrega;
    }

    public function setEstado($estado) {
        $this->_pedido->estado = $estado;
    }

    public function getId() {
        return $this->_id;
    }

    public function getPedido() {
        return $this->_pedido;
    }

    public function setPedido($pedido) {

        if (is_array($pedido)) {
            $this->_pedido->loadDefaultValues();
            $this->_pedido->setAttributes($pedido);
        } elseif ($pedido instanceof Pedido) {
            $this->_pedido = $pedido;
        }
    }

    public function getPedidoDetalles() {
        return $this->_pedidoDetalles;
    }

    public function setPedidoDetalles($detalles) {
        foreach ($detalles as $key => $detalle) {
            if (is_array($detalle)) {
                $id = $detalle['medicamento_id'];
                $this->_pedidoDetalles[$id] = new PedidoDetalle();
                $this->_pedidoDetalles[$id]->loadDefaultValues();
                $this->_pedidoDetalles[$id]->setAttributes($detalle);
            } elseif ($detalle instanceof PedidoDetalle) {
                if($detalle->isNewRecord)
                {
                    $this->_pedidoDetalles[$detalles->medicamento_id] = $detalle;
                }
                else {
                    $this->_pedidoDetalles[$detalles->medicamento_id] = $detalle;
                }
            }
        }
    }

    public function validate($attributeNames = null, $clearErrors = true)
    {
        return parent::validate($attributeNames, $clearErrors); // TODO: Change the autogenerated stub
    }

    public function setAttributes($data) {

        $this->pedido = $data['Pedido'];

        $detalles = json_decode($data['PedidoForm']['pedidoDetalles']);

        foreach ($detalles as $detalleData)
        {
            $detalle = new PedidoDetalle();
            $detalle->medicamento_id = $detalleData->id;
            $detalle->cantidad = $detalleData->cantidad;
            $this->_pedidoDetalles []= $detalle;
        }
    }

    public function  save() {
        if (!$this->validate()) {
            return false;
        }

        $transaction = Yii::$app->db->beginTransaction();

        if($this->getIsNewRecord()) {
            $this->_pedido->fecha_registro = date('Y-m-d H:i');
        }

        if(intval($this->pedido->estado) === Pedido::ENTREGADO) {
            $this->pedido->fecha_entrega = date('Y-m-d H:i');
        }

        if (!$this->pedido->save()) {
            $this->addError('error', 'Ah ocurrido un error al salvar el pedido.');
            $transaction->rollBack();
            return false;
        }

        $notificacionData = [];
        if (!$this->saveDetalles($this->pedido->id, $notificacionData)) {
            $this->addError('error', 'Ah ocurrido un error al salvar los medicamentos del pedido.');
            $transaction->rollBack();
            return false;
        }


        $transaction->commit();

        try {
            foreach ($notificacionData as $proveedor => $medicamentos) {

                $body = Yii::$app->controller->renderPartial('notification.php', [
                    'model' => $this->pedido,
                    'proveedorId' => $proveedor,
                    'medicamentos'=>$medicamentos]);

                $result = Yii::$app->mailer->compose()
                    ->setFrom(Yii::$app->params['adminEmail'])
                    ->setTo($proveedor)
//                    ->setTo(Yii::$app->params['adminEmail'])
                    ->setBcc(Yii::$app->params['adminEmail'])
                    ->setSubject("NotificaciÃ³n de nuevo Pedido.")
                    ->setHtmlBody($body)
                    ->send();
            }
        }
        catch (\Exception $e) {
//            var_dump($e->getMessage());die;
        }

        return true;
    }

    private function saveDetalles($pedidoId, &$notificacionData) {

        $notificacionData = [];

        foreach ($this->_pedidoDetalles as  $index => $detalle) {

            if($detalle->isNewRecord)
            {
                $detalle->pedido_id = $pedidoId;
            }

            $medicamento  = $detalle->medicamento;
            $medicamento->stock = $medicamento->stock - $detalle->cantidad;

            if($medicamento->stock < 0)
                return false;

            if(!$detalle->save() && !$medicamento->save()) {
                return false;
            }

            $medicamento = $detalle->medicamento;

            $user = $medicamento->proveedor;

            $proveedorId = $user->email;

            $medicamentoData = [
                'nombre' => $medicamento->nombre,
                'codigo' => $medicamento->codigo,
                'cantidad' => $detalle->cantidad
            ];


            if(isset($notificacionData[$proveedorId]))
            {
                array_push($notificacionData[$proveedorId], $medicamentoData);
            }
            else {
                $notificacionData[$proveedorId] = [];
                array_push($notificacionData[$proveedorId], $medicamentoData);
            }
        }

        return true;
    }

    private $_isNewRecord;
    public function getIsNewRecord() {
        return $this->pedido->isNewRecord;
    }
}